
$color-heather-purple: rgb(144, 7, 98);
$color-murrayfield-navy: rgb(8, 57, 115);
$color-saltire-blue: rgb(0, 94, 184);
$color-single-malt-gold: rgb(225, 162, 69);
$color-sanna-sand: rgb(215, 210, 203);
$color-total-eclipse: rgb(29, 29, 27);
$color-dreich-gray: rgb(57, 57, 59);
$color-dark-granite: rgb(89, 89, 89);
$color-mid-granite: rgb(146, 144, 145);
$color-light-granite: rgb(229, 229, 229);
$color-very-light-granite: rgb(245, 246, 250);
$color-white: rgb(255, 255, 255);
$color-theme-primary: rgb(144, 7, 98);
$color-theme-secondary: rgb(215, 210, 203);
$color-theme-success: rgb(40, 167, 69);
$color-theme-info: rgb(0, 94, 184);
$color-theme-warning: rgb(225, 162, 69);
$color-theme-danger: rgb(220, 53, 69);
$color-theme-light: rgb(146, 144, 145);
$color-theme-dark: rgb(57, 57, 59);
$font-size-base: 1rem;
$h1-font-size-lg: 1rem * 3;
$h1-font-size: 1rem * 2;
$h2-font-size: 1rem * 1.75;
$h3-font-size: 1rem * 1.5;
$h4-font-size: 1rem * 1.25;
$h5-font-size: 1rem;
$h6-font-size: 1rem * 0.875;
$font-family-sans-serif: 'Source Sans Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
$font-family-heading: 'Source Sans Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
$font-family-display: 'evelethclean-regular', sans-serif, $font-family-sans-serif;
$font-family-display-secondary: 'evelethclean-thin', 'evelethclean-thin', sans-serif, $font-family-sans-serif;
$font-weight-bold: 700;
$font-weight-semi-bold: 600;
$font-weight-normal: 400;
$font-weight-light: 300;
$opacity-disabled: 0.5;
$height-footer: 64px;
$tappable-square: 44px;
$duration-quickly: 0.08s;
$duration-slowly: 0.5s;
$z-index-modal: 9999;
$z-index-sticky: 100;
$breakpoint-xl: 1200px;
$breakpoint-md: 768px;
$max-container-width-xl: 1140px;
$breakpoint-sm: 576px;
$breakpoint-lg: 992px;
$breakpoint-xs: 0;
$max-container-width-md: 720px;
$max-container-width-sm: 540px;
$max-container-width-lg: 960px;
$max-container-width-xxl: 1340px;
$breakpoint-xxl: 1400px;
$shadow-s: 0 0 0 1px rgba(92,106,196,.1);
$spacing-xl: 2px;
$spacing-l: 1px;
$spacing-m: 0;
$spacing-s: -0.5px;
$spacing-xs: -1px;
$border-radius-default: 0.25rem;
$border-radius-lg: 0.3rem;
$border-radius-sm: 0.2rem;
$border-radius-pill: 50rem;
$spacer-0: 0;
$spacer-1: 0.25rem;
$spacer-2: 0.5rem;
$spacer-3: 1rem;
$spacer-4: 2rem;
$spacer-5: 4rem;
$line-height-m: 1.6;
$line-height-s: 1.3;
$line-height-xs: 1;
$grid-columns: 12;
$grid-gutter-width: 32px;

/* GLOBAL FUNCTIONS
--------------------------------------------- */

// Create a tint
//
// @param  {Color}  $color to tint
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Create a shade
//
// @param  {Color}  $color to shade
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Calculate color difference
// See https://www.w3.org/TR/AERT/#color-contrast for algorithm
//
// @param  {Color} $color of foreground
// @param  {Color} $color of background
// @return {Boolean}
@function color-difference($foreground, $background) {
  $r: (max(red($foreground), red($background))) - (min(red($foreground), red($background)));
  $g: (max(green($foreground), green($background))) - (min(green($foreground), green($background)));
  $b: (max(blue($foreground), blue($background))) - (min(blue($foreground), blue($background)));
  $sum-rgb: $r + $g + $b;

  @if $sum-rgb < 350 {
    @return "false";
  } @else {
    @return "true";
  }
}

// Set text color based on contrast
//
// @param  {Color}  $color to set
// @param  {Color}  $background color to test
// @param  {Color}  $fallback color to set in case contrast check fails
@function set-text-color($color, $background, $fallback: null) {
  @if $fallback == null {
    $fallback: #000;
  }
  @if (color-difference($color, $background) == "false") {
    @return $fallback;
  } @else {
    @return $color;
  }
}

/// Darkens the foreground color by the background color. This is the same as the
/// “multiply” filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.
@function rem($value) {
  $unit: unit($value);

  @if $unit == "rem" {
    @return $value;
  } @else if $unit == "px" {
    @return $value / $size-m * 1rem;
  } @else if $unit == "em" {
    @return $unit / 1em * 1rem;
  } @else {
    @error "Value must be in px, em, or rem.";
  }
}

/// Returns the value in pixels for a given rem value.
/// @param {Number} $value - The rem value to be converted.
/// @return {Number} The converted value in pixels.
@function px($value) {
  $unit: unit($value);

  @if $unit == "px" {
    @return $value;
  } @else if $unit == "em" {
    @return ($value / 1em) * $size-m;
  } @else if $unit == "rem" {
    @return ($value / 1rem) * $size-m;
  } @else {
    @error "Value must be in rem, em, or px.";
  }
}

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != "map" {
    @return null;
  }

  $output: "";
  $newline: "\A ";

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + "#{$newline}- #{$key} #{available-names($value, $level + 1)}";
    }
  } @else {
    $output: "(";
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ", ", "");
      $output: $output + "#{$key}#{$sep}#{available-names($value, $level + 1)}";
      $i: $i + 1;
    }

    $output: $output + ")";
  }

  @return $output;
}
